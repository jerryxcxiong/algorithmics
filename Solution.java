package solution;import java.util.*;import java.text.*;public class Solution {        public static void main1(String[] args) {        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */            }        private int convertBinaryStringToDigital(String binaryString, double base){        int digital = 0;        for (int i=0; i<binaryString.length(); i++) {            String subString = binaryString.substring(i, i+1);            //System.out.println("TERSYT: " + binaryString + "" + i +"; " + subString);            int bitInt = Integer.parseInt(subString);            int powerValue = 0;            if (bitInt>0) {                powerValue = bitInt * (int) Math.pow(base, binaryString.length()-1-i);                digital = digital + powerValue;            }        }        return digital;    }        private void cutBinaryStringAtDiff(String binaryString, StringBuilder output){        //System.out.println("t0: " + binaryString + "; output: " + output);        if (binaryString.length()<1) {            return;        }                String secondString;        if (binaryString.length()==1) {            if (output.length()==0) {                output.append(binaryString);            } else {                secondString = output.substring(output.length()-1);                if (binaryString.equals(secondString)){                     output.append(binaryString);                }             }            return;        }                        String firstString = binaryString.substring(0, 1);        if (output.length()==0) {            secondString = binaryString.substring(1, 2);             //System.out.println("\tAAA; " + firstString + "; " + secondString);            output.append(firstString);            if (firstString.equals(secondString)){                  if (binaryString.length()>1) {                    cutBinaryStringAtDiff(binaryString.substring(1), output);                }                            }         } else {            secondString = output.substring(output.length()-1);            //System.out.println("\tBBB; " + firstString + "; " + secondString + "; " + binaryString.substring(1));            if (firstString.equals(secondString)){                  output.append(firstString);                cutBinaryStringAtDiff(binaryString.substring(1), output);            }         }                                        }        private void converDigitalToBinary(int digital, StringBuilder binaryString){        if (digital<=1) {            binaryString.append(digital);            return;        }                int remain=digital%2;        binaryString.append(remain);        converDigitalToBinary(digital >> 1, binaryString);    }    Set<List<Integer>> premuteSet = new HashSet<>();    private void permute(List<Integer> arr, int k) {        for (int i = k; i < arr.size(); i++) {            Collections.swap(arr, i, k);            permute(arr, k + 1);            Collections.swap(arr, k, i);        }        if (k == arr.size() - 1) {            List<Integer> newObject = new ArrayList<>();            newObject.addAll(arr);            premuteSet.add(newObject);        }    }    private List<List<Integer>> createDetaGrid(Set<List<Integer>> set) {        List<List<Integer>> detaGridSet = new ArrayList<>();        set.stream().forEach((arr) -> {            detaGridSet.add(createDeta(arr));        });        return detaGridSet;    }    private List<Integer> createDeta(List<Integer> arr) {        List<Integer> newObject = new ArrayList<>();        for (int i = 0; i < arr.size(); i++) {            int currentInt = arr.get(i);            int detaValue = i + 1;            for (int j = i - 1; j >= 0; j--) {                int previousInt = arr.get(j);                if (previousInt >= currentInt) {                    detaValue = i - j;                    break;                }            }            newObject.add(detaValue);        }        //System.out.println("posi: " + arr);        //System.out.println("deta: " + newObject);        //System.out.println("\n ");        return newObject;    }    private double averageDeta(List<List<Integer>> set) {        int number = set.size();        double sumDeta = 0.0;        Iterator iterator = set.iterator();        for (List<Integer> set1 : set) {            List<Integer> arr = (List<Integer>) set1;            sumDeta = sumDeta + sumDeta(arr);        }        return sumDeta / number;    }    private int sumDeta(List<Integer> arr) {        int currentInt = 0;        for (Integer arr1 : arr) {            currentInt = currentInt + arr1;        }        //System.out.println("currentInt: " + currentInt);        return currentInt;    }    private double roundTo2Decimals(double val) {        DecimalFormat df2 = new DecimalFormat("###.##");        return Double.valueOf(df2.format(val));    }    private void solution(int input){        StringBuilder binaryString = new StringBuilder();        converDigitalToBinary(input, binaryString);                String bs = binaryString.reverse().toString();                StringBuilder output = new StringBuilder();        cutBinaryStringAtDiff(bs, output);                String oString = output.reverse().toString();        System.out.println(input + "; bs=" + bs + "; oString=" +  oString + "; final=" + convertBinaryStringToDigital(oString, 2.0));       }    public static void main(String[] args) {        Solution solution = new Solution();        solution.solution(6);        solution.solution(12);        solution.solution(11);        System.exit(0);        StringBuilder binaryString = new StringBuilder();        solution.converDigitalToBinary(12, binaryString);        String bs = binaryString.reverse().toString();        System.out.println("12: " + bs);        StringBuilder output = new StringBuilder();        solution.cutBinaryStringAtDiff(bs, output);        System.out.println("12: " + output.reverse());                binaryString = new StringBuilder();        solution.converDigitalToBinary(8, binaryString);        bs = binaryString.reverse().toString();        System.out.println("8: " + bs);                output = new StringBuilder();        solution.cutBinaryStringAtDiff(bs, output);        System.out.println("8: " + output.reverse());                System.out.println("1100: " + solution.convertBinaryStringToDigital("1100", 2.0));        System.out.println("1100: " + solution.convertBinaryStringToDigital("1100", 4.0));                System.out.println("1100: " + solution.convertBinaryStringToDigital("1100", 8.0));                        System.exit(0);        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */        Solution pm = new Solution();        Scanner sc = new Scanner(System.in);        int rowNumber = sc.nextInt();        //System.out.println("rowNumber=" + rowNumber);        for (int i = 0; i < rowNumber; i++) {            int arrayNumber = sc.nextInt();            List<Integer> arrayList = new ArrayList<>();            for (int j = 0; j < arrayNumber; j++) {                arrayList.add(sc.nextInt());            }            //System.out.println(arrayList);            pm.permute(arrayList, 0);            //System.out.println(pm.premuteSet);            //System.out.println("\n");            List<List<Integer>> detaGridSet = pm.createDetaGrid(pm.premuteSet);            //System.out.println(detaGridSet);            //System.out.println("\n");            double averageDeta = pm.averageDeta(detaGridSet);            System.out.println(pm.roundTo2Decimals(averageDeta));            //System.out.println("\n");            pm.premuteSet = new HashSet<>();        }    }}